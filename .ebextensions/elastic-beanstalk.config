packages:
  python:
    # For queue workers - commenting out for now since we haven't enabled queues
    supervisor: []

  yum:
    # For general debugging and server management
    htop: []

commands:

  001_debug:
    command: "env > /root/command-env ; pwd > /root/command-path"

  002_debug:
    command: "echo \"$LARAVEL_ENV\" > /root/command-laravel-env"

  # This enables the swapfile on the instance, to make it more robust
  003_enableSwap:
    ignoreErrors: true
    command: |
      echo "Disabling Swapfile";
      swapoff /tmp/swapfile ;
      rm -rf /tmp/swapfile ;
      echo "Making Blank 1G file" &&
      dd if=/dev/zero of=/tmp/swapfile count=1024 bs=1048576
      echo "Making file into Swapfile" &&
      mkswap /tmp/swapfile &&
      echo "Fixing permissions" &&
      chmod 600 /tmp/swapfile &&
      chown root:root /tmp/swapfile &&
      echo "Enabling Swap" &&
      swapon /tmp/swapfile


  020_installNodeNpm:
    command: "rm -rf /opt/node && mkdir -p /opt/node && curl https://nodejs.org/dist/v9.2.0/node-v9.2.0-linux-x64.tar.gz | tar xz --directory /opt/node --strip-components=1"

  # This will sometimes fail if node is already installed (ie, deploy is not immutable) - this is ok
  #021_installNodeNpmSymlinks:
  #  command: "ln -s /opt/node/bin/node /usr/bin/node && ln -s /opt/node/bin/npm /usr/bin/npm && ln -s /opt/node/bin/npx /usr/bin/npx"
  #  ignoreErrors: true

  021_installNodeNpmSymlinks:
    command: "rm -f /usr/bin/node ; ln -s /opt/node/bin/node /usr/bin/node ; rm -f /usr/bin/npm ; ln -s /opt/node/bin/npm /usr/bin/npm ; rm -f /usr/bin/npx ; ln -s /opt/node/bin/npx /usr/bin/npx"
    ignoreErrors: true


container_commands:

  001_laravelEnvSetup:
    command: "rm -rf .env ; ln -s \"$LARAVEL_ENV_FILE\" \".env\" ; echo \"Using $LARAVEL_ENV_FILE as env file for laravel.\""
    cwd: "/var/app/ondeck/www"

  002_debug:
    command: "echo \"$LARAVEL_ENV\" > /root/container-command-laravel-env ; pwd > /root/container-command-path"

  003_debug:
    command: "env > /root/container-command-env ; echo 'Here is your env: ' ; env"

  004_debug:
    command: "echo $USER > /root/user"


  010_msg:
    command: "echo AWS Container Commands started, starting Composer install."

  020_installComposerPackages:
    command: "/opt/elasticbeanstalk/support/composer.phar install --no-dev"
    cwd: "/var/app/ondeck/www"

  040_installNpmPackages:
    command: "sudo npm install --unsafe-perm || sudo npm install --unsafe-perm || sudo npm install --unsafe-perm"
    cwd: "/var/app/ondeck/www"
    # ignoreErrors: true

  # Give several chances to run successfully, in case it fails somehow the first
  045_npmWebpack:
    command: "echo \"Running cmd: sudo npm run $NPM_RUN_CMD\" ; sudo npm run $NPM_RUN_CMD || sudo npm run $NPM_RUN_CMD || sudo npm run $NPM_RUN_CMD"
    cwd: "/var/app/ondeck/www"

  # For debugging/dev purposes - !!NOTE!! using this command will wipe the entire database and rebuild from scratch if uncommented
  #048_tmp_migration_rollback:
  #  command: "php artisan migrate:refresh --force --seed || exit 1"
  #  leader_only: true
  #  cwd: "/var/app/ondeck/www"

  050_migrations:
    command: "php artisan migrate --force || exit 1"
    leader_only: true
    cwd: "/var/app/ondeck/www"

  070_msg:
    command: "echo Completed Laravel migration, starting Laravel database seeding"

  # This also includes user permission updating in the seeding
  080_dbSeed:
    leader_only: true
    command: "php artisan db:seed --force || php artisan db:seed --force || php artisan db:seed --force || php artisan db:seed --force"
    cwd: "/var/app/ondeck/www"

  085_vendorpublish:
    command: "php artisan vendor:publish --all"
    cwd: "/var/app/ondeck/www"

  090_cacheClear:
    command: "php artisan cache:clear"
    # command: "php artisan cache:clear-warm" 
    # Use this once it's implemented - it cleares the cache, then creates several queue workers to regenerate the cache
    cwd: "/var/app/ondeck/www"
    leader_only: true


  # It's ok if these fail, it's not critical
  091_enableCaches:
    # Need to remove all closures from routes before we can cache
    # command: "php artisan config:cache ; php artisan route:cache"
    command: "php artisan config:cache ; (php artisan route:cache || echo 'routes cached');"
    cwd: "/var/app/ondeck/www"

  # Reconfigure queues and restart
  #093_supervisorInstall:
  #  command: |
      # Setup init script
  #    sudo cp -f /var/app/ondeck/config/aws/supervisor/supervisord-init /etc/init.d/supervisord ||
  #      sudo cp -f /var/app/current/config/aws/supervisor/supervisord-init /etc/init.d/supervisord
  #    sudo chmod 755 /etc/init.d/supervisord
  #    sudo chown root:root /etc/init.d/supervisord
  #
  #    # Create the config file
  #    /usr/local/bin/echo_supervisord_conf > /etc/supervisord.conf

  #    # Only add the line if it's not already there
  #    grep "/etc/supervisor.d" /etc/supervisord.conf || echo -e "\n[include]\nfiles = /etc/supervisor.d/*.conf" >> /etc/supervisord.conf

  #    # Start, but only if not already started
  #    if [[ $( sudo /etc/init.d/supervisord status | grep "RUNNING" &> /dev/null ; echo $?) -ne "0" ]] ; then
  #        sudo /etc/init.d/supervisord start
  #    fi

  #    sudo /usr/local/bin/supervisorctl reread;
  #    sudo /usr/local/bin/supervisorctl update;
  #    sudo /usr/local/bin/supervisorctl start laravel-worker:*;

      # Run the supervisor below in a postdeploy script, it will fail here because the app isn't ready


  095_permissions:
    command: "chown -R webapp:webapp /var/app/ondeck/*"

  097_hostname:
    command: "sudo hostname $SERVER_HOSTNAME"


  099_msg:
    command: "echo Completed database seeting, Container Commands complete."



# Setting environment variables which are code-specific
option_settings:

# For all envs
  - option_name: COMPOSER_HOME
    value: "/root"
  - namespace: "aws:elasticbeanstalk:container:php:phpini"
    option_name: document_root
    value: /www/public

# Needs to be changed for prod env, defaults fine for dev env
  - option_name: NPM_RUN_CMD
    value: "dev"
  - option_name: LARAVEL_ENV_FILE
    value: "aws-dev.env"
  - option_name: SERVER_HOSTNAME
    value: "laravel-dev"
  - option_name: NODE_ENV
    value: "development"


# Use these only for prod, for dev they are specified
  - option_name: RDS_HOSTNAME
    value: "fill in for prod, ignored for non-prod"
#  - option_name: RDS_READ_HOSTNAME
#    value: "This is commented out because it can not be set to a placeholder value. Set this only if it's actually a valid hostname"
  - option_name: RDS_DB_NAME
    value: "fill in for prod, ignored for non-prod"
  - option_name: RDS_PASSWORD
    value: "fill in for prod, ignored for non-prod"
  - option_name: RDS_USERNAME
    value: "fill in for prod, ignored for non-prod"
  - option_name: RDS_PORT
    value: "3306"


  # Instance health check path
  # - namespace: aws:elasticbeanstalk:application
  #  option_name: Application Healthcheck URL
  #  value: "/elb/status"


#  - namespace: "aws:elasticbeanstalk:customoption"
#    CacheNodeType : cache.m1.small
#    NumCacheNodes : 1
#    Engine : memcached



# Additionally, make sure the following are set on the env level (not in the code here)
#  * LARAVEL_ENV_FILE - this is important - specify which env file is being used during deploy
#  * NPM_RUN_CMD - specify which 'npm run' command to run. For example, if NPM_RUN_CMD = "dev', the command 'npm run dev' will be run during deploy.

files:

  # This will be moved to cron.d in 097_move_cron
  # Consider writing to cron.d using directly
  # Switched to webapp from root
  "/etc/cron.d/laravel_cron_jobs":
     mode: "000644"
     owner: root
     group: root
     encoding: plain
     content: |
        SHELL=/bin/bash
        PATH=/sbin:/bin:/usr/sbin:/usr/bin
        MAILTO=root
        HOME=/var/www

        # Laravel Cron Worker
        * * * * * webapp /bin/nice -n 19 /usr/bin/php /var/app/current/www/artisan schedule:run >> /var/app/current/www/storage/logs/cron.log 2>> /var/app/current/www/laravel/storage/logs/cron-error.log

        # Ensure queue workers are restarted if they crash - typically supervisor should handle this, but this is a final failsafe
        # * * * * * root /usr/local/bin/supervisorctl start laravel-worker:* 1> /dev/null 2>&1

        # Permissions
        * * * * * root chown webapp:webapp /var/www/html/www/storage/logs -R 1> /dev/null 2>&1
        */15 * * * * root chown -R webapp:webapp /var/app/current/* 1> /dev/null 2>&1


  # Symlinks to the wwwdir
  # "/home/ec2-user/webdir":
  #  mode: "120400"
  #  content: "/var/www/html/www"

  # Symlinks to the wwwdir
  # "/etc/skel/webdir":
  #  mode: "120400"
  #  content: "/var/www/html/www"

  # Bashrc tweaks
  # "/tmp/bashaddons" :
  "/etc/profile.d/999_bashcmd.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      source /opt/elasticbeanstalk/support/envvars
      # Bash addons for all shells
      alias l="ls -l"
      alias logveb="tail -n 1000 -f /var/log/eb-activity.log 2> /dev/null"
      alias logvhttpd="tail -n 1000 -f /var/log/httpd/* 2> /dev/null"
      alias logvapp="tail -n 1000 -f /var/www/html/www/storage/logs/*.log 2> /dev/null"
      alias logvqueue="tail -n 1000 -f /var/log/supervisor.log 2> /dev/null"
      alias mysqlconnect="echo 'Connecting to database...'; sleep 2; mysql -h \"$RDS_HOSTNAME\" -u \"$RDS_USERNAME\" --password=\"$RDS_PASSWORD\" --database=\"$RDS_DB_NAME\""
      alias artisan='sudo -E php /var/www/html/www/artisan'


  # Refresh Laravel Caches so they don't use the ondeck URL
  "/opt/elasticbeanstalk/hooks/appdeploy/post/02_laravel_postdeploy_caches.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |

      cd /var/app/current/www;
      source /opt/elasticbeanstalk/support/envvars;

      php /var/app/current/www/artisan config:cache;

  # Config for supervisord
  "/etc/supervisor.d/laravel-worker.conf" :
    mode: "000644"
    owner: root
    group: root
    content: |
      [program:laravel-worker]
      process_name=%(program_name)s_%(process_num)02d
      command=nice -n19 /usr/bin/php /var/www/html/www/artisan queue:work --daemon --delay=10 --timeout=20 --sleep=2 --tries=25 --queue=critical,high,default,low,nightly
      autostart=true
      autorestart=true
      user=webapp
      numprocs=1
      redirect_stderr=true
      stdout_logfile=/var/log/supervisor.log

